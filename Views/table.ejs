<!DOCTYPE html>
<html>
<head>
  <meta charset="UTF-8">
  <title>–¢–µ–ª–µ—Ñ–æ–Ω–Ω—ã–π —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫</title>
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet">
  <style>
    body {
      background: #f0f2f5;
      font-family: 'Segoe UI', Arial, sans-serif;
      margin: 0;
      padding: 0;
    }

    .navbar {
      background: linear-gradient(135deg, #667eea 0%, #764ba2 100%) !important;
      padding: 1rem 0;
      box-shadow: 0 2px 10px rgba(0,0,0,0.1);
    }

    .navbar-brand {
      color: white !important;
      font-size: 1.4rem;
      font-weight: 600;
      letter-spacing: -0.5px;
    }

    .navbar .text-secondary {
      color: rgba(255,255,255,0.9) !important;
    }

    .navbar .btn-outline-secondary {
      color: white;
      border-color: rgba(255,255,255,0.5);
      transition: all 0.3s ease;
    }

    .navbar .btn-outline-secondary:hover {
      background: rgba(255,255,255,0.2);
      border-color: white;
      color: white;
      transform: translateY(-1px);
    }

    #toggleColumnFilterBtn, #openAddEntryModalBtn {
      border: none;
      padding: 10px 20px;
      font-weight: 500;
      border-radius: 8px;
      transition: all 0.3s ease;
      box-shadow: 0 2px 5px rgba(0,0,0,0.1);
    }

    #toggleColumnFilterBtn {
      background: #4a90e2;
      color: white;
    }

    #toggleColumnFilterBtn:hover {
      background: #357abd;
      box-shadow: 0 4px 12px rgba(74,144,226,0.4);
    }

    #openAddEntryModalBtn {
      background: #48bb78;
      color: white;
    }

    #openAddEntryModalBtn:hover {
      background: #38a169;
      box-shadow: 0 4px 12px rgba(72,187,120,0.4);
    }

    #phonebookWrapper {
      background: white;
      border-radius: 16px;
      box-shadow: 0 4px 20px rgba(0,0,0,0.08);
      padding: 30px;
      animation: fadeInUp 0.5s ease-out;
      overflow-x: auto;
    }

    @keyframes fadeInUp {
      from { opacity: 0; transform: translateY(20px); }
      to { opacity: 1; transform: translateY(0); }
    }

    .table {
      margin-bottom: 0;
      border: none;
      border-radius: 12px;
      overflow: hidden;
      border-collapse: separate; 
      border-spacing: 0;
    }

    .table thead {
      background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
    }

    .table th {
      color: white;
      font-weight: 600;
      text-transform: uppercase;
      font-size: 0.85rem;
      letter-spacing: 0.5px;
      padding: 15px;
      border: none;
      white-space: nowrap;
    }

    #phonebookWrapper th {
      background: transparent;
    }


    .table td {
      padding: 12px 15px;
      border: none;
      border-top: 1px solid #e9ecef;
      font-size: 0.95rem;
      color: #495057;
    }
    .table tbody tr:first-child td {
      border-top: none;
    }


    .table tbody tr {
      transition: all 0.2s ease;
    }

    td[contenteditable="true"] {
      background: #e3f2fd;
      position: relative;
      cursor: text;
      transition: all 0.3s ease;
    }

    td[contenteditable="true"]:focus {
      background: white;
      outline: none;
      box-shadow: inset 0 0 0 2px #667eea;
    }

    #phonebookWrapper .table thead th {
      color: #fff !important;
      border: none !important;
    }

    #addEntryModal {
      display: none;
      position: fixed;
      left: 0; top: 0;
      width: 100vw; height: 100vh;
      background: rgba(0,0,0,0.5);
      backdrop-filter: blur(5px);
      align-items: center; justify-content: center;
      z-index: 1000;
      animation: fadeIn 0.3s ease-out;
    }

    #addEntryModal > div {
      background: white;
      padding: 35px;
      border-radius: 16px;
      min-width: 400px;
      max-width: 700px; 
      position: relative;
      box-shadow: 0 10px 40px rgba(0,0,0,0.2);
      animation: slideIn 0.3s ease-out;
    }

    @keyframes fadeIn { from { opacity: 0; } to { opacity: 1; } }
    @keyframes slideIn { from { transform: translateY(-30px); opacity: 0; } to { transform: translateY(0); opacity: 1; } }

    #closeAddEntryModalBtn {
      position: absolute; right: 20px; top: 20px;
      width: 32px; height: 32px;
      cursor: pointer; color: #999;
      font-size: 24px; line-height: 32px; text-align: center;
      border-radius: 50%;
      transition: all 0.3s ease;
    }

    #closeAddEntryModalBtn:hover {
      background: #f5f5f5;
      color: #333;
      transform: rotate(90deg);
    }

    #addEntryForm label {
      display: block;
      font-weight: 600;
      color: #495057;
      margin-bottom: 8px;
      font-size: 0.97rem;
    }

    #addEntryForm input {
      width: 100%;
      padding: 10px 15px;
      border: 2px solid #ced4da; 
      border-radius: 8px;
      font-size: 1rem;
      transition: all 0.3s ease;
    }

    #addEntryForm input:focus {
      outline: none;
      border-color: #667eea;
      box-shadow: 0 0 0 3px rgba(102,126,234,0.1);
    }

    #addEntryForm button {
      background: linear-gradient(135deg, #48bb78 0%, #38a169 100%);
      color: white;
      border: none;
      padding: 12px 24px;
      border-radius: 8px;
      font-size: 1rem; font-weight: 600;
      cursor: pointer;
      transition: all 0.3s ease;
      width: 100%;
    }

    #addEntryForm button:hover {
      transform: translateY(-2px);
      box-shadow: 0 5px 15px rgba(72,187,120,0.4);
    }

    .container-fluid { animation: fadeIn 0.5s ease-out; }

    ::-webkit-scrollbar { width: 10px; height: 10px; }
    ::-webkit-scrollbar-track { background: #f1f1f1; }
    ::-webkit-scrollbar-thumb { background: #888; border-radius: 5px; }
    ::-webkit-scrollbar-thumb:hover { background: #555; }

    .table thead th.sortable-header {
      cursor: pointer;
      user-select: none;
      position: relative;
      padding-right: 25px !important;
    }
    .table thead th.sortable-header::after {
      content: ' ';
      position: absolute; right: 10px; top: 50%;
      margin-top: -8px;
      border: 5px solid transparent;
      opacity: 0.3;
    }
    .table thead th.sortable-header:hover::after { opacity: 0.7; }
    .table thead th.sortable-header.sorted-asc::after { content: ' '; border-bottom-color: white; opacity: 1; }
    .table thead th.sortable-header.sorted-desc::after { content: ' '; border-top-color: white; margin-top: -2px; opacity: 1; }

    .modal-form-grid {
      display: flex;
      flex-wrap: wrap;
      justify-content: space-between;
      max-height: 70vh;
      overflow-y: auto;
      padding: 5px 15px 5px 5px;
      margin-right: -15px;
    }
    .modal-form-field {
      flex-basis: calc(50% - 10px);
      box-sizing: border-box; 
      margin-bottom: 1rem;
    }
    .modal-form-grid::-webkit-scrollbar { width: 8px; }
    .modal-form-grid::-webkit-scrollbar-track { background: #f1f1f1; border-radius: 4px; }
    .modal-form-grid::-webkit-scrollbar-thumb { background: #ccc; border-radius: 4px; }
    .modal-form-grid::-webkit-scrollbar-thumb:hover { background: #aaa; }

    @media (max-width: 768px) {
      .navbar-brand { font-size: 1.1rem; }
      .navbar .text-secondary { display: none; }
      #phonebookWrapper { padding: 15px; border-radius: 12px; }
      .table { font-size: 0.85rem; }
      .table th, .table td { padding: 8px 5px; }
      
      #addEntryModal > div { min-width: 90vw; padding: 25px; }
      .modal-form-field { flex-basis: 100%; }
    }

    .search-bar-wrapper {
      position: relative;
      width: 350px; 
    }

    .search-bar-wrapper::before {
      content: 'üîç';
      position: absolute;
      left: 12px;
      top: 50%;
      transform: translateY(-50%);
      opacity: 0.4;
      font-size: 16px;
    }

    #mainSearchInput {
      padding-left: 40px; 
      border-radius: 8px;
      border: 2px solid #ced4da;
      transition: all 0.3s ease;
    }

    #mainSearchInput:focus {
      border-color: #667eea;
      box-shadow: 0 0 0 3px rgba(102,126,234,0.2);
    }

    @media (max-width: 768px) {
      .d-flex.justify-content-between {
        flex-wrap: wrap;
      }
      .search-bar-wrapper {
        width: 100%;
        margin-bottom: 10px;
      }
      .d-flex.justify-content-between > .d-flex {
        width: 100%;
        justify-content: flex-end;
      }
    }
  </style>
</head>
<body>
  <nav class="navbar navbar-expand-lg navbar-light bg-white shadow-sm mb-4">
    <div class="container-fluid">
      <span class="navbar-brand fw-bold">–¢–µ–ª–µ—Ñ–æ–Ω–Ω—ã–π —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫</span>
      <div class="d-flex align-items-center">
        <span class="me-3 text-secondary">–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: <%= user.username %> (<%= user.role %>)</span>
        <a href="/logout" class="btn btn-outline-secondary btn-sm">–í—ã–π—Ç–∏</a>
      </div>
    </div>
  </nav>

  <div class="container-fluid">
      <div class="d-flex justify-content-end align-items-center mb-3">
        <div class="search-bar-wrapper me-2">
          <input type="text" id="mainSearchInput" class="form-control" placeholder="–ì–ª–æ–±–∞–ª—å–Ω—ã–π –ø–æ–∏—Å–∫...">
        </div>
        <div class="d-flex">
          <button id="toggleColumnFilterBtn" class="btn btn-primary btn-sm me-2">–§–∏–ª—å—Ç—Ä</button>
          <% if (user.role === 'admin') { %>
            <button id="openAddEntryModalBtn" class="btn btn-success btn-sm">–î–æ–±–∞–≤–∏—Ç—å –∑–∞–ø–∏—Å—å</button>
          <% } %>
        </div>
      </div>

    <% if (user.role === 'admin') { %>
      <div id="addEntryModal" style="display: none;">
        <div>
          <span id="closeAddEntryModalBtn">&times;</span>
          <form id="addEntryForm">
          <h4 class="mb-4 text-center">–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å</h4>
          <div class="modal-form-grid">
            <% for(let key in rows[0]) { if(key !== 'id') { %>
              <div class="modal-form-field mb-3">
                <% let displayKey = key; %>
                <% if (displayKey == "role") displayKey = "–î–æ–ª–∂–Ω–æ—Å—Ç—å" %>
                <% if (displayKey == "department") displayKey = "–û—Ç–¥–µ–ª" %>
                <% if (displayKey == "phonenumber") displayKey = "–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞" %>
                <% if (displayKey == "name_of_org") displayKey = "–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏" %>
                <% if (displayKey == "email") displayKey = "–ü–æ—á—Ç–∞" %>
                <% if (displayKey == "full_name") displayKey = "–§–ò–û" %>
                <% if (displayKey == "fax") displayKey = "–§–∞–∫—Å" %>
                <% if (displayKey == "adress") displayKey = "–ê–¥—Ä–µ—Å" %>
                <% if (displayKey == "phone directory") displayKey = "–°–ø—Ä–∞–≤–æ—á–Ω—ã–π –Ω–æ–º–µ—Ä" %>
                <label class="form-label"><%= displayKey %></label>
                <input name="<%= key %>" class="form-control" required>
              </div>
            <% } } %>
          </div>
          <button type="submit" class="btn btn-success w-100 mt-2">–°–æ—Ö—Ä–∞–Ω–∏—Ç—å</button>
        </form>
        </div>
      </div>
    <% } %>

    <div id="phonebookWrapper">
      <table class="table table-hover align-middle shadow-sm">
        <thead>
          <tr>
            <% for(let key in rows[0]) { %>
              <% let displayKey = key; %>
              <% if (displayKey == "role") displayKey = "–¥–æ–ª–∂–Ω–æ—Å—Ç—å" %>
              <% if (displayKey == "id") displayKey = "–∫–æ–¥" %>
              <% if (displayKey == "department") displayKey = "–æ—Ç–¥–µ–ª–µ–Ω–∏–µ" %>
              <% if (displayKey == "phonenumber") displayKey = "–Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞" %>
              <% if (displayKey == "name_of_org") displayKey = "–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏" %>
              <% if (displayKey == "email") displayKey = "–ü–æ—á—Ç–∞" %>
              <% if (displayKey == "full_name") displayKey = "–§–ò–û" %>
              <% if (displayKey == "fax") displayKey = "–§–∞–∫—Å" %>
              <% if (displayKey == "adress") displayKey = "–ê–¥—Ä–µ—Å" %>
              <% if (displayKey == "phone directory") displayKey = "–°–ø—Ä–∞–≤–æ—á–Ω—ã–π –Ω–æ–º–µ—Ä" %>
              <th class="sortable-header"><%= displayKey %></th>
            <% } %>
          </tr>
        </thead>
        <tbody>
          <% rows.forEach(row => { %>
            <tr>
              <% for(let key in row) { %>
                <td 
                  contenteditable="<%= user.role === 'admin' && key !== 'id' %>" 
                  data-id="<%= row.id %>" 
                  data-key="<%= key %>">
                  <%= row[key] %>
                </td>
              <% } %>
            </tr>
          <% }) %>
        </tbody>
      </table>
    </div>
  </div>

  <script>
    const USER_ROLE = "<%= user.role %>";
    // –ú–∞–ø–ø–∏–Ω–≥ –∞–Ω–≥–ª–∏–π—Å–∫–∏—Ö –±—É–∫–≤ –Ω–∞ —Ä—É—Å—Å–∫–∏–µ
    const engToRusMap = {
      'q': '–π', 'w': '—Ü', 'e': '—É', 'r': '–∫', 't': '–µ', 'y': '–Ω', 'u': '–≥', 
      'i': '—à', 'o': '—â', 'p': '–∑', '[': '—Ö', ']': '—ä', 'a': '—Ñ', 's': '—ã', 
      'd': '–≤', 'f': '–∞', 'g': '–ø', 'h': '—Ä', 'j': '–æ', 'k': '–ª', 'l': '–¥', 
      ';': '–∂', "'": '—ç', 'z': '—è', 'x': '—á', 'c': '—Å', 'v': '–º', 'b': '–∏', 
      'n': '—Ç', 'm': '—å', ',': '–±', '.': '—é', '/': '.', '`': '—ë',
      'Q': '–ô', 'W': '–¶', 'E': '–£', 'R': '–ö', 'T': '–ï', 'Y': '–ù', 'U': '–ì',
      'I': '–®', 'O': '–©', 'P': '–ó', '{': '–•', '}': '–™', 'A': '–§', 'S': '–´',
      'D': '–í', 'F': '–ê', 'G': '–ü', 'H': '–†', 'J': '–û', 'K': '–õ', 'L': '–î',
      ':': '–ñ', '"': '–≠', 'Z': '–Ø', 'X': '–ß', 'C': '–°', 'V': '–ú', 'B': '–ò',
      'N': '–¢', 'M': '–¨', '<': '–ë', '>': '–Æ', '?': ',', '~': '–Å'
    };

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç–∞ —Å –∞–Ω–≥–ª–∏–π—Å–∫–æ–π —Ä–∞—Å–∫–ª–∞–¥–∫–∏ –Ω–∞ —Ä—É—Å—Å–∫—É—é
    function engToRus(text) {
      return text.split('').map(char => engToRusMap[char] || char).join('');
    }

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ —Å —É—á–µ—Ç–æ–º –æ–±–µ–∏—Ö —Ä–∞—Å–∫–ª–∞–¥–æ–∫
    function searchWithLayoutSupport(searchQuery, targetText) {
      const query = searchQuery.toLowerCase();
      const text = targetText.toLowerCase();
      
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä—è–º–æ–≥–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
      if (text.includes(query)) return true;
      
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–µ–π —Ä–∞—Å–∫–ª–∞–¥–∫–∏
      const convertedQuery = engToRus(query);
      return text.includes(convertedQuery);
    }
    const toggleColumnFilterButton = document.getElementById('toggleColumnFilterBtn');
    let isColumnFilterActive = false;
    let columnFilterRowElement = null;

    function sortTableByColumn(tableElement, columnIndex, isAscending = true) {
        const sortModifier = isAscending ? 1 : -1;
        const tableBody = tableElement.tBodies[0];
        const rows = Array.from(tableBody.querySelectorAll("tr"));

        const sortedRows = rows.sort((rowA, rowB) => {
            const cellTextA = rowA.querySelector(`td:nth-child(${ columnIndex + 1 })`).textContent.trim();
            const cellTextB = rowB.querySelector(`td:nth-child(${ columnIndex + 1 })`).textContent.trim();
            
            const isCellANumber = !isNaN(parseFloat(cellTextA)) && isFinite(cellTextA.replace(/[\s-]/g, ''));
            const isCellBNumber = !isNaN(parseFloat(cellTextB)) && isFinite(cellTextB.replace(/[\s-]/g, ''));

            if (isCellANumber && isCellBNumber) {
                return (parseFloat(cellTextA) - parseFloat(cellTextB)) * sortModifier;
            } else {
                return cellTextA.localeCompare(cellTextB, 'ru', { sensitivity: 'base' }) * sortModifier;
            }
        });

        while (tableBody.firstChild) {
            tableBody.removeChild(tableBody.firstChild);
        }

        tableBody.append(...sortedRows);

        tableElement.querySelectorAll("th.sortable-header").forEach(header => {
            header.classList.remove("sorted-asc", "sorted-desc");
        });
        const activeHeader = tableElement.querySelector(`th:nth-child(${ columnIndex + 1 })`);
        if(activeHeader) {
            activeHeader.classList.toggle("sorted-asc", isAscending);
            activeHeader.classList.toggle("sorted-desc", !isAscending);
        }
    }

    document.addEventListener('DOMContentLoaded', () => {
        const tableElement = document.querySelector('#phonebookWrapper table');

        tableElement.querySelectorAll("th.sortable-header").forEach((header, index) => {
            header.addEventListener("click", () => {
                const isCurrentlyAscending = header.classList.contains("sorted-asc");
                sortTableByColumn(tableElement, index, !isCurrentlyAscending);
            });
        });

        const mainSearchInput = document.getElementById('mainSearchInput');
        const allTableRows = Array.from(tableElement.querySelector('tbody').querySelectorAll('tr')); 

        mainSearchInput.addEventListener('keyup', () => {
          const searchQuery = mainSearchInput.value.toLowerCase().trim();

          if (isColumnFilterActive && searchQuery) {
              toggleColumnFilterButton.click(); 
          }

          for (const row of allTableRows) {
              const rowText = row.textContent.toLowerCase();
              row.style.display = searchWithLayoutSupport(searchQuery, rowText) ? '' : 'none';
          }
        });
    });

    toggleColumnFilterButton.addEventListener('click', function() {
        const tableElement = document.querySelector('#phonebookWrapper table');
        const mainSearchInput = document.getElementById('mainSearchInput');
        
        if (!isColumnFilterActive && mainSearchInput.value) {
            mainSearchInput.value = '';
            mainSearchInput.dispatchEvent(new Event('keyup'));
        }
        
        if (!isColumnFilterActive) {
            const headerRow = tableElement.rows[0];
            columnFilterRowElement = tableElement.tHead.insertRow(1); 
            columnFilterRowElement.id = 'column-filter-row';

            for (let i = 0; i < headerRow.cells.length; i++) {
                const cell = columnFilterRowElement.insertCell(i);
                cell.style.padding = '8px';
                cell.innerHTML = `<input type="text" class="form-control form-control-sm" placeholder="–ü–æ–∏—Å–∫..." data-col-index="${i}">`;
            }

            columnFilterRowElement.querySelectorAll('input').forEach(input => {
                input.addEventListener('keyup', () => {
                    const tableBody = tableElement.querySelector('tbody');
                    const filters = Array.from(columnFilterRowElement.querySelectorAll('input')).map(inp => inp.value.toLowerCase());
                    
                    for (const row of tableBody.rows) {
                        let isRowVisible = true;
                        for (let i = 0; i < filters.length; i++) {
                            const cellText = row.cells[i]?.textContent.toLowerCase() || '';
                            if (filters[i]) {
                                if (!searchWithLayoutSupport(filters[i], cellText)) {
                                    isRowVisible = false;
                                    break;
                                }
                            }
                        }
                        row.style.display = isRowVisible ? '' : 'none';
                    }
                });
            });
            isColumnFilterActive = true;
            toggleColumnFilterButton.textContent = '–°–±—Ä–æ—Å–∏—Ç—å';
            toggleColumnFilterButton.classList.replace('btn-primary', 'btn-secondary');
        } else {
            if (columnFilterRowElement) {
                columnFilterRowElement.remove();
                columnFilterRowElement = null; 
            }
            tableElement.querySelectorAll('tbody tr').forEach(tr => tr.style.display = '');
            isColumnFilterActive = false;
            toggleColumnFilterButton.textContent = '–§–∏–ª—å—Ç—Ä';
            toggleColumnFilterButton.classList.replace('btn-secondary', 'btn-primary');
        }
    });

    if (USER_ROLE === 'admin') {
      const addEntryModal = document.getElementById('addEntryModal');
      const openModalButton = document.getElementById('openAddEntryModalBtn');
      const closeModalButton = document.getElementById('closeAddEntryModalBtn');
      
      if(openModalButton) { openModalButton.onclick = () => { addEntryModal.style.display = 'flex'; }; }
      if(closeModalButton) { closeModalButton.onclick = () => { addEntryModal.style.display = 'none'; }; }
      
      window.onclick = (event) => { if(event.target === addEntryModal) { addEntryModal.style.display = 'none'; } };

      const addEntryForm = document.getElementById('addEntryForm');
      if (addEntryForm) {
        addEntryForm.onsubmit = async function(event) {
          event.preventDefault();
          const formData = new FormData(this);
          const data = {};
          formData.forEach((value, key) => data[key] = value);
          const response = await fetch('/add', {
            method: 'POST',
            headers: {'Content-Type':'application/json'},
            body: JSON.stringify(data)
          });
          if(response.ok) location.reload(); else alert('–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è');
        }
      }

      const phonebookWrapper = document.getElementById('phonebookWrapper');
      phonebookWrapper.addEventListener('keydown', function(event) {
        if (event.target.tagName === 'TD' && event.target.isContentEditable && event.key === 'Enter') {
          event.preventDefault();
          event.target.blur();
        }
      });

      phonebookWrapper.addEventListener('blur', async function(event) {
        if (event.target.tagName === 'TD' && event.target.isContentEditable) {
            const cell = event.target;
            const id = cell.dataset.id;
            const key = cell.dataset.key;
            let value = cell.innerText.replace(/\s+/g, ' ').trim();
            const response = await fetch('/edit', {
              method: 'POST',
              headers: {'Content-Type':'application/json'},
              body: JSON.stringify({ id, key, value })
            });
            if(!response.ok) alert('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è');
        }
      }, true);
    }
</script>
</body>
</html>